#! /usr/bin/python3

# Copyright (C) 2013 Canonical Ltd.
# Author: Colin Watson <cjwatson@ubuntu.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""Wait for a package to appear on the local mirror.

Run anonftpsync repeatedly, at five-minute intervals, until the requested
package/version is available.
"""

from __future__ import print_function

from optparse import OptionParser
import os
import signal
import subprocess
import sys
import time

sys.path.insert(0, os.path.join(sys.path[0], os.pardir, "lib"))


def reset_sigpipe():
    # Python installs a SIGPIPE handler by default.  This is bad for
    # non-Python subprocesses, which generally expect SIGPIPE to be set to
    # the default action.
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)


def main():
    from cdimage.config import Config
    from cdimage.mirror import find_mirror

    config = Config()
    parser = OptionParser("%prog [options] PACKAGE_VERSION")
    parser.add_option(
        "-a", "--architecture", default="i386",
        help="architecture to search, or 'source' (default: i386)")
    parser.add_option(
        "-c", "--component", default="main",
        help="component to search (default: main)")
    parser.add_option(
        "-d", "--suite", default=config.series,
        help="suite to search (default: %s)" % config.series)
    parser.add_option(
        "--interval", default=300, type="int",
        help="interval between mirror syncs (default: 300 seconds)")
    options, args = parser.parse_args()
    if len(args) < 1:
        parser.error("no package specified")
    package = args[0]
    if "_" not in package:
        parser.error("package must be specified as <package>_<version>")

    if options.architecture == "source":
        mirror = find_mirror(config, "i386")
        target = os.path.join(
            mirror, "dists", options.suite, options.component,
            "source", "Sources.xz")
    else:
        mirror = find_mirror(config, options.architecture)
        target = os.path.join(
            mirror, "dists", options.suite, options.component,
            "binary-%s" % options.architecture, "Packages.xz")

    print("Waiting for %s." % package, end="")
    sys.stdout.flush()

    first_time = True
    while subprocess.call(
            ["xzgrep", "-q", package, target], preexec_fn=reset_sigpipe) != 0:
        if not first_time:
            print(".", end="")
            sys.stdout.flush()
            time.sleep(options.interval)
            first_time = True
        anonftpsync = subprocess.Popen(
            ["anonftpsync"], stderr=subprocess.STDOUT)
        stdout = anonftpsync.communicate()[0]
        if anonftpsync.returncode != 0 and "lockfile" not in stdout:
            sys.exit(1)
    print(" package found.")


if __name__ == "__main__":
    main()
